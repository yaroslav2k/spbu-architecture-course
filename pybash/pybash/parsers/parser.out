Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> pipeline
Rule 1     pipeline -> expression
Rule 2     pipeline -> pipeline pipe expression
Rule 3     expression -> identifier
Rule 4     expression -> expression identifier
Rule 5     expression -> assignment
Rule 6     assignment -> ASSIGNMENT
Rule 7     identifier -> IDENTIFIER
Rule 8     identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER
Rule 9     identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER
Rule 10    pipe -> PIPE

Terminals, with rules where they appear

ASSIGNMENT           : 6
DOUBLE_QUOTES_ENCLOSED_IDENTIFIER : 9
IDENTIFIER           : 7
PIPE                 : 10
SINGLE_QUOTES_ENCLOSED_IDENTIFIER : 8
error                : 

Nonterminals, with rules where they appear

assignment           : 5
expression           : 1 2 4
identifier           : 3 4
pipe                 : 2
pipeline             : 2 0

Parsing method: LALR

state 0

    (0) S' -> . pipeline
    (1) pipeline -> . expression
    (2) pipeline -> . pipeline pipe expression
    (3) expression -> . identifier
    (4) expression -> . expression identifier
    (5) expression -> . assignment
    (7) identifier -> . IDENTIFIER
    (8) identifier -> . SINGLE_QUOTES_ENCLOSED_IDENTIFIER
    (9) identifier -> . DOUBLE_QUOTES_ENCLOSED_IDENTIFIER
    (6) assignment -> . ASSIGNMENT

    IDENTIFIER      shift and go to state 5
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 6
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 7
    ASSIGNMENT      shift and go to state 8

    pipeline                       shift and go to state 1
    expression                     shift and go to state 2
    identifier                     shift and go to state 3
    assignment                     shift and go to state 4

state 1

    (0) S' -> pipeline .
    (2) pipeline -> pipeline . pipe expression
    (10) pipe -> . PIPE

    PIPE            shift and go to state 10

    pipe                           shift and go to state 9

state 2

    (1) pipeline -> expression .
    (4) expression -> expression . identifier
    (7) identifier -> . IDENTIFIER
    (8) identifier -> . SINGLE_QUOTES_ENCLOSED_IDENTIFIER
    (9) identifier -> . DOUBLE_QUOTES_ENCLOSED_IDENTIFIER

    PIPE            reduce using rule 1 (pipeline -> expression .)
    $end            reduce using rule 1 (pipeline -> expression .)
    IDENTIFIER      shift and go to state 5
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 6
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 7

    identifier                     shift and go to state 11

state 3

    (3) expression -> identifier .

    IDENTIFIER      reduce using rule 3 (expression -> identifier .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 3 (expression -> identifier .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 3 (expression -> identifier .)
    PIPE            reduce using rule 3 (expression -> identifier .)
    $end            reduce using rule 3 (expression -> identifier .)


state 4

    (5) expression -> assignment .

    IDENTIFIER      reduce using rule 5 (expression -> assignment .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 5 (expression -> assignment .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 5 (expression -> assignment .)
    PIPE            reduce using rule 5 (expression -> assignment .)
    $end            reduce using rule 5 (expression -> assignment .)


state 5

    (7) identifier -> IDENTIFIER .

    IDENTIFIER      reduce using rule 7 (identifier -> IDENTIFIER .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 7 (identifier -> IDENTIFIER .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 7 (identifier -> IDENTIFIER .)
    PIPE            reduce using rule 7 (identifier -> IDENTIFIER .)
    $end            reduce using rule 7 (identifier -> IDENTIFIER .)


state 6

    (8) identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER .

    IDENTIFIER      reduce using rule 8 (identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 8 (identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 8 (identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER .)
    PIPE            reduce using rule 8 (identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER .)
    $end            reduce using rule 8 (identifier -> SINGLE_QUOTES_ENCLOSED_IDENTIFIER .)


state 7

    (9) identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER .

    IDENTIFIER      reduce using rule 9 (identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 9 (identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 9 (identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER .)
    PIPE            reduce using rule 9 (identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER .)
    $end            reduce using rule 9 (identifier -> DOUBLE_QUOTES_ENCLOSED_IDENTIFIER .)


state 8

    (6) assignment -> ASSIGNMENT .

    IDENTIFIER      reduce using rule 6 (assignment -> ASSIGNMENT .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 6 (assignment -> ASSIGNMENT .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 6 (assignment -> ASSIGNMENT .)
    PIPE            reduce using rule 6 (assignment -> ASSIGNMENT .)
    $end            reduce using rule 6 (assignment -> ASSIGNMENT .)


state 9

    (2) pipeline -> pipeline pipe . expression
    (3) expression -> . identifier
    (4) expression -> . expression identifier
    (5) expression -> . assignment
    (7) identifier -> . IDENTIFIER
    (8) identifier -> . SINGLE_QUOTES_ENCLOSED_IDENTIFIER
    (9) identifier -> . DOUBLE_QUOTES_ENCLOSED_IDENTIFIER
    (6) assignment -> . ASSIGNMENT

    IDENTIFIER      shift and go to state 5
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 6
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 7
    ASSIGNMENT      shift and go to state 8

    expression                     shift and go to state 12
    identifier                     shift and go to state 3
    assignment                     shift and go to state 4

state 10

    (10) pipe -> PIPE .

    IDENTIFIER      reduce using rule 10 (pipe -> PIPE .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 10 (pipe -> PIPE .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 10 (pipe -> PIPE .)
    ASSIGNMENT      reduce using rule 10 (pipe -> PIPE .)


state 11

    (4) expression -> expression identifier .

    IDENTIFIER      reduce using rule 4 (expression -> expression identifier .)
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 4 (expression -> expression identifier .)
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER reduce using rule 4 (expression -> expression identifier .)
    PIPE            reduce using rule 4 (expression -> expression identifier .)
    $end            reduce using rule 4 (expression -> expression identifier .)


state 12

    (2) pipeline -> pipeline pipe expression .
    (4) expression -> expression . identifier
    (7) identifier -> . IDENTIFIER
    (8) identifier -> . SINGLE_QUOTES_ENCLOSED_IDENTIFIER
    (9) identifier -> . DOUBLE_QUOTES_ENCLOSED_IDENTIFIER

    PIPE            reduce using rule 2 (pipeline -> pipeline pipe expression .)
    $end            reduce using rule 2 (pipeline -> pipeline pipe expression .)
    IDENTIFIER      shift and go to state 5
    SINGLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 6
    DOUBLE_QUOTES_ENCLOSED_IDENTIFIER shift and go to state 7

    identifier                     shift and go to state 11
